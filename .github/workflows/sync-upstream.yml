name: sync-upstream

on:
  schedule:
    - cron: '0 * * * *' # hourly
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Git user
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config pull.rebase true
          git config rebase.autoStash true

      - name: Ensure upstream remote and fetch
        run: |
          if ! git remote get-url upstream > /dev/null 2>&1; then
            git remote add upstream https://github.com/iptv-org/epg.git
          fi
          # Fetch both remotes' master
          git fetch --prune upstream master
          git fetch --prune origin   master

      - name: Rebase master onto upstream/master
        id: rebase
        shell: bash
        run: |
          set -euo pipefail
          git checkout master

          # If we're already up to date with upstream, skip rebase/push
          if git merge-base --is-ancestor upstream/master master; then
            echo "already_up_to_date=true" >> "$GITHUB_OUTPUT"
            echo "changes_to_push=false"   >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Perform a non-interactive rebase
          if ! git rebase upstream/master; then
            echo "::error::Rebase encountered conflicts. Resolve manually on your fork."
            # Abort to leave repo clean for subsequent runs
            git rebase --abort || true
            exit 1
          fi

          # Determine if we need to push (compare to origin/master)
          if [ -n "$(git log --oneline origin/master..master)" ]; then
            echo "changes_to_push=true" >> "$GITHUB_OUTPUT"
          else
            echo "changes_to_push=false" >> "$GITHUB_OUTPUT"
          fi
          echo "already_up_to_date=false" >> "$GITHUB_OUTPUT"

      - name: Push rebased master to origin
        if: steps.rebase.outputs.changes_to_push == 'true'
        run: |
          # Use force-with-lease to avoid clobbering concurrent updates
          git push --force-with-lease origin master

      - name: Summary
        run: |
          if [[ "${{ steps.rebase.outputs.already_up_to_date }}" == "true" ]]; then
            echo "✅ Already up to date with upstream/master."
          elif [[ "${{ steps.rebase.outputs.changes_to_push }}" == "true" ]]; then
            echo "✅ Rebased onto upstream/master and pushed to origin."
          else
            echo "ℹ️ No changes to push."
          fi
